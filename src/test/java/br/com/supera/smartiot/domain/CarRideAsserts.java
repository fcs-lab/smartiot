package br.com.supera.smartiot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CarRideAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarRideAllPropertiesEquals(CarRide expected, CarRide actual) {
        assertCarRideAutoGeneratedPropertiesEquals(expected, actual);
        assertCarRideAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarRideAllUpdatablePropertiesEquals(CarRide expected, CarRide actual) {
        assertCarRideUpdatableFieldsEquals(expected, actual);
        assertCarRideUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarRideAutoGeneratedPropertiesEquals(CarRide expected, CarRide actual) {
        assertThat(expected)
            .as("Verify CarRide auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarRideUpdatableFieldsEquals(CarRide expected, CarRide actual) {
        assertThat(expected)
            .as("Verify CarRide relevant properties")
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getOrigin()).as("check origin").isEqualTo(actual.getOrigin()))
            .satisfies(e -> assertThat(e.getDestination()).as("check destination").isEqualTo(actual.getDestination()))
            .satisfies(e -> assertThat(e.getAvailableSeats()).as("check availableSeats").isEqualTo(actual.getAvailableSeats()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarRideUpdatableRelationshipsEquals(CarRide expected, CarRide actual) {
        assertThat(expected)
            .as("Verify CarRide relationships")
            .satisfies(e -> assertThat(e.getDriver()).as("check driver").isEqualTo(actual.getDriver()));
    }
}
