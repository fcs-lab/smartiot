package br.com.supera.smartiot.domain;

import static br.com.supera.smartiot.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PricingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingAllPropertiesEquals(Pricing expected, Pricing actual) {
        assertPricingAutoGeneratedPropertiesEquals(expected, actual);
        assertPricingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingAllUpdatablePropertiesEquals(Pricing expected, Pricing actual) {
        assertPricingUpdatableFieldsEquals(expected, actual);
        assertPricingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingAutoGeneratedPropertiesEquals(Pricing expected, Pricing actual) {
        assertThat(expected)
            .as("Verify Pricing auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingUpdatableFieldsEquals(Pricing expected, Pricing actual) {
        assertThat(expected)
            .as("Verify Pricing relevant properties")
            .satisfies(e -> assertThat(e.getServiceType()).as("check serviceType").isEqualTo(actual.getServiceType()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingUpdatableRelationshipsEquals(Pricing expected, Pricing actual) {}
}
