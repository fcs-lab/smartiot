package br.com.supera.smartiot.domain;

import static br.com.supera.smartiot.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ConfiguracaoAlertaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConfiguracaoAlertaAllPropertiesEquals(ConfiguracaoAlerta expected, ConfiguracaoAlerta actual) {
        assertConfiguracaoAlertaAutoGeneratedPropertiesEquals(expected, actual);
        assertConfiguracaoAlertaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConfiguracaoAlertaAllUpdatablePropertiesEquals(ConfiguracaoAlerta expected, ConfiguracaoAlerta actual) {
        assertConfiguracaoAlertaUpdatableFieldsEquals(expected, actual);
        assertConfiguracaoAlertaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConfiguracaoAlertaAutoGeneratedPropertiesEquals(ConfiguracaoAlerta expected, ConfiguracaoAlerta actual) {
        assertThat(expected)
            .as("Verify ConfiguracaoAlerta auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConfiguracaoAlertaUpdatableFieldsEquals(ConfiguracaoAlerta expected, ConfiguracaoAlerta actual) {
        assertThat(expected)
            .as("Verify ConfiguracaoAlerta relevant properties")
            .satisfies(e -> assertThat(e.getLimite()).as("check limite").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLimite()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConfiguracaoAlertaUpdatableRelationshipsEquals(ConfiguracaoAlerta expected, ConfiguracaoAlerta actual) {
        assertThat(expected)
            .as("Verify ConfiguracaoAlerta relationships")
            .satisfies(e -> assertThat(e.getSensor()).as("check sensor").isEqualTo(actual.getSensor()));
    }
}
