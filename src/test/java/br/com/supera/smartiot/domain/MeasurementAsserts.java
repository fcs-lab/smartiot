package br.com.supera.smartiot.domain;

import static br.com.supera.smartiot.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MeasurementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeasurementAllPropertiesEquals(Measurement expected, Measurement actual) {
        assertMeasurementAutoGeneratedPropertiesEquals(expected, actual);
        assertMeasurementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeasurementAllUpdatablePropertiesEquals(Measurement expected, Measurement actual) {
        assertMeasurementUpdatableFieldsEquals(expected, actual);
        assertMeasurementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeasurementAutoGeneratedPropertiesEquals(Measurement expected, Measurement actual) {
        assertThat(expected)
            .as("Verify Measurement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeasurementUpdatableFieldsEquals(Measurement expected, Measurement actual) {
        assertThat(expected)
            .as("Verify Measurement relevant properties")
            .satisfies(e -> assertThat(e.getMeasurementType()).as("check measurementType").isEqualTo(actual.getMeasurementType()))
            .satisfies(e -> assertThat(e.getValue()).as("check value").isEqualTo(actual.getValue()))
            .satisfies(
                e ->
                    assertThat(e.getMeasurementTime())
                        .as("check measurementTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getMeasurementTime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeasurementUpdatableRelationshipsEquals(Measurement expected, Measurement actual) {
        assertThat(expected)
            .as("Verify Measurement relationships")
            .satisfies(e -> assertThat(e.getEnrollment()).as("check enrollment").isEqualTo(actual.getEnrollment()));
    }
}
