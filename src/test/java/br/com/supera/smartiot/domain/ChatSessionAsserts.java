package br.com.supera.smartiot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChatSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatSessionAllPropertiesEquals(ChatSession expected, ChatSession actual) {
        assertChatSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertChatSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatSessionAllUpdatablePropertiesEquals(ChatSession expected, ChatSession actual) {
        assertChatSessionUpdatableFieldsEquals(expected, actual);
        assertChatSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatSessionAutoGeneratedPropertiesEquals(ChatSession expected, ChatSession actual) {
        assertThat(expected)
            .as("Verify ChatSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatSessionUpdatableFieldsEquals(ChatSession expected, ChatSession actual) {
        assertThat(expected)
            .as("Verify ChatSession relevant properties")
            .satisfies(e -> assertThat(e.getSessionId()).as("check sessionId").isEqualTo(actual.getSessionId()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatSessionUpdatableRelationshipsEquals(ChatSession expected, ChatSession actual) {}
}
