package br.com.supera.smartiot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VehicleServiceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleServiceAllPropertiesEquals(VehicleService expected, VehicleService actual) {
        assertVehicleServiceAutoGeneratedPropertiesEquals(expected, actual);
        assertVehicleServiceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleServiceAllUpdatablePropertiesEquals(VehicleService expected, VehicleService actual) {
        assertVehicleServiceUpdatableFieldsEquals(expected, actual);
        assertVehicleServiceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleServiceAutoGeneratedPropertiesEquals(VehicleService expected, VehicleService actual) {
        assertThat(expected)
            .as("Verify VehicleService auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleServiceUpdatableFieldsEquals(VehicleService expected, VehicleService actual) {
        assertThat(expected)
            .as("Verify VehicleService relevant properties")
            .satisfies(e -> assertThat(e.getServiceName()).as("check serviceName").isEqualTo(actual.getServiceName()))
            .satisfies(e -> assertThat(e.getServiceDate()).as("check serviceDate").isEqualTo(actual.getServiceDate()))
            .satisfies(e -> assertThat(e.getServiceDescription()).as("check serviceDescription").isEqualTo(actual.getServiceDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleServiceUpdatableRelationshipsEquals(VehicleService expected, VehicleService actual) {
        assertThat(expected)
            .as("Verify VehicleService relationships")
            .satisfies(e -> assertThat(e.getVehicle()).as("check vehicle").isEqualTo(actual.getVehicle()));
    }
}
