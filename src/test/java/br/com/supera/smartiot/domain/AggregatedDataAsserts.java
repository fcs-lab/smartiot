package br.com.supera.smartiot.domain;

import static br.com.supera.smartiot.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AggregatedDataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregatedDataAllPropertiesEquals(AggregatedData expected, AggregatedData actual) {
        assertAggregatedDataAutoGeneratedPropertiesEquals(expected, actual);
        assertAggregatedDataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregatedDataAllUpdatablePropertiesEquals(AggregatedData expected, AggregatedData actual) {
        assertAggregatedDataUpdatableFieldsEquals(expected, actual);
        assertAggregatedDataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregatedDataAutoGeneratedPropertiesEquals(AggregatedData expected, AggregatedData actual) {
        assertThat(expected)
            .as("Verify AggregatedData auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregatedDataUpdatableFieldsEquals(AggregatedData expected, AggregatedData actual) {
        assertThat(expected)
            .as("Verify AggregatedData relevant properties")
            .satisfies(e -> assertThat(e.getDataType()).as("check dataType").isEqualTo(actual.getDataType()))
            .satisfies(e -> assertThat(e.getValue()).as("check value").isEqualTo(actual.getValue()))
            .satisfies(
                e ->
                    assertThat(e.getAggregationTime())
                        .as("check aggregationTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getAggregationTime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAggregatedDataUpdatableRelationshipsEquals(AggregatedData expected, AggregatedData actual) {}
}
