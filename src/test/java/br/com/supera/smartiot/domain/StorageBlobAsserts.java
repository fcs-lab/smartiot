package br.com.supera.smartiot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StorageBlobAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStorageBlobAllPropertiesEquals(StorageBlob expected, StorageBlob actual) {
        assertStorageBlobAutoGeneratedPropertiesEquals(expected, actual);
        assertStorageBlobAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStorageBlobAllUpdatablePropertiesEquals(StorageBlob expected, StorageBlob actual) {
        assertStorageBlobUpdatableFieldsEquals(expected, actual);
        assertStorageBlobUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStorageBlobAutoGeneratedPropertiesEquals(StorageBlob expected, StorageBlob actual) {
        assertThat(expected)
            .as("Verify StorageBlob auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStorageBlobUpdatableFieldsEquals(StorageBlob expected, StorageBlob actual) {
        assertThat(expected)
            .as("Verify StorageBlob relevant properties")
            .satisfies(e -> assertThat(e.getFileName()).as("check fileName").isEqualTo(actual.getFileName()))
            .satisfies(e -> assertThat(e.getContentType()).as("check contentType").isEqualTo(actual.getContentType()))
            .satisfies(e -> assertThat(e.getByteSize()).as("check byteSize").isEqualTo(actual.getByteSize()))
            .satisfies(e -> assertThat(e.getChecksum()).as("check checksum").isEqualTo(actual.getChecksum()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e -> assertThat(e.getMetadata()).as("check metadata").isEqualTo(actual.getMetadata()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStorageBlobUpdatableRelationshipsEquals(StorageBlob expected, StorageBlob actual) {}
}
