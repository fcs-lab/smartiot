package br.com.supera.smartiot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserContractAllPropertiesEquals(UserContract expected, UserContract actual) {
        assertUserContractAutoGeneratedPropertiesEquals(expected, actual);
        assertUserContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserContractAllUpdatablePropertiesEquals(UserContract expected, UserContract actual) {
        assertUserContractUpdatableFieldsEquals(expected, actual);
        assertUserContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserContractAutoGeneratedPropertiesEquals(UserContract expected, UserContract actual) {
        assertThat(expected)
            .as("Verify UserContract auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserContractUpdatableFieldsEquals(UserContract expected, UserContract actual) {
        assertThat(expected)
            .as("Verify UserContract relevant properties")
            .satisfies(e -> assertThat(e.getContractName()).as("check contractName").isEqualTo(actual.getContractName()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserContractUpdatableRelationshipsEquals(UserContract expected, UserContract actual) {
        assertThat(expected)
            .as("Verify UserContract relationships")
            .satisfies(e -> assertThat(e.getUsers()).as("check users").isEqualTo(actual.getUsers()));
    }
}
