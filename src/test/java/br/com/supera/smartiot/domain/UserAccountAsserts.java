package br.com.supera.smartiot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAllPropertiesEquals(UserAccount expected, UserAccount actual) {
        assertUserAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAllUpdatablePropertiesEquals(UserAccount expected, UserAccount actual) {
        assertUserAccountUpdatableFieldsEquals(expected, actual);
        assertUserAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAutoGeneratedPropertiesEquals(UserAccount expected, UserAccount actual) {
        assertThat(expected)
            .as("Verify UserAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountUpdatableFieldsEquals(UserAccount expected, UserAccount actual) {
        assertThat(expected)
            .as("Verify UserAccount relevant properties")
            .satisfies(e -> assertThat(e.getAccountName()).as("check accountName").isEqualTo(actual.getAccountName()))
            .satisfies(e -> assertThat(e.getEmailAddress()).as("check emailAddress").isEqualTo(actual.getEmailAddress()))
            .satisfies(e -> assertThat(e.getAdmissionDate()).as("check admissionDate").isEqualTo(actual.getAdmissionDate()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getMobilePhone()).as("check mobilePhone").isEqualTo(actual.getMobilePhone()))
            .satisfies(e -> assertThat(e.getRpushFeedbackId()).as("check rpushFeedbackId").isEqualTo(actual.getRpushFeedbackId()))
            .satisfies(e -> assertThat(e.getExecCommands()).as("check execCommands").isEqualTo(actual.getExecCommands()))
            .satisfies(e -> assertThat(e.getIsBlocked()).as("check isBlocked").isEqualTo(actual.getIsBlocked()))
            .satisfies(e -> assertThat(e.getEmployerName()).as("check employerName").isEqualTo(actual.getEmployerName()))
            .satisfies(e -> assertThat(e.getPushConfiguration()).as("check pushConfiguration").isEqualTo(actual.getPushConfiguration()))
            .satisfies(e -> assertThat(e.getTraveledDistance()).as("check traveledDistance").isEqualTo(actual.getTraveledDistance()))
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getBlockedReason()).as("check blockedReason").isEqualTo(actual.getBlockedReason()))
            .satisfies(e -> assertThat(e.getBlockedById()).as("check blockedById").isEqualTo(actual.getBlockedById()))
            .satisfies(e -> assertThat(e.getBlockedAt()).as("check blockedAt").isEqualTo(actual.getBlockedAt()))
            .satisfies(e -> assertThat(e.getDeletedReason()).as("check deletedReason").isEqualTo(actual.getDeletedReason()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()))
            .satisfies(e -> assertThat(e.getDeletedById()).as("check deletedById").isEqualTo(actual.getDeletedById()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getRegistrationCode()).as("check registrationCode").isEqualTo(actual.getRegistrationCode()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getPasswordHint()).as("check passwordHint").isEqualTo(actual.getPasswordHint()))
            .satisfies(e -> assertThat(e.getFeatureFlags()).as("check featureFlags").isEqualTo(actual.getFeatureFlags()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()))
            .satisfies(e -> assertThat(e.getPublicPlace()).as("check publicPlace").isEqualTo(actual.getPublicPlace()))
            .satisfies(e -> assertThat(e.getAddressNumber()).as("check addressNumber").isEqualTo(actual.getAddressNumber()))
            .satisfies(e -> assertThat(e.getStreetName()).as("check streetName").isEqualTo(actual.getStreetName()))
            .satisfies(e -> assertThat(e.getAddressComplement()).as("check addressComplement").isEqualTo(actual.getAddressComplement()))
            .satisfies(e -> assertThat(e.getCityName()).as("check cityName").isEqualTo(actual.getCityName()))
            .satisfies(e -> assertThat(e.getStateName()).as("check stateName").isEqualTo(actual.getStateName()))
            .satisfies(e -> assertThat(e.getCnhImage()).as("check cnhImage").isEqualTo(actual.getCnhImage()))
            .satisfies(e -> assertThat(e.getProfileImage()).as("check profileImage").isEqualTo(actual.getProfileImage()))
            .satisfies(e -> assertThat(e.getCnhExpirationDate()).as("check cnhExpirationDate").isEqualTo(actual.getCnhExpirationDate()))
            .satisfies(e -> assertThat(e.getCnhStatus()).as("check cnhStatus").isEqualTo(actual.getCnhStatus()))
            .satisfies(e -> assertThat(e.getRegistrationStatus()).as("check registrationStatus").isEqualTo(actual.getRegistrationStatus()))
            .satisfies(e -> assertThat(e.getAnalyzedBy()).as("check analyzedBy").isEqualTo(actual.getAnalyzedBy()))
            .satisfies(e -> assertThat(e.getAnalyzedAt()).as("check analyzedAt").isEqualTo(actual.getAnalyzedAt()))
            .satisfies(e -> assertThat(e.getSignatureImage()).as("check signatureImage").isEqualTo(actual.getSignatureImage()))
            .satisfies(
                e -> assertThat(e.getResidenceProofImage()).as("check residenceProofImage").isEqualTo(actual.getResidenceProofImage())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountUpdatableRelationshipsEquals(UserAccount expected, UserAccount actual) {
        assertThat(expected)
            .as("Verify UserAccount relationships")
            .satisfies(e -> assertThat(e.getApplicationUser()).as("check applicationUser").isEqualTo(actual.getApplicationUser()));
    }
}
